"use client";
import { createContext, useState, FC, useContext, ReactNode } from "react";
import { Inter } from "next/font/google";
import Head from "next/head";
import "./globals.css";
const inter = Inter({ subsets: ["latin"] });

type ThemeName = "rainforest" | "candy" | "base" | "default";
// Create a new React Context for Theme
const ThemeContext = createContext({
  theme: "base" as ThemeName,
  rotateTheme: () => {},
});

const useTheme = () => useContext(ThemeContext);

const themes: ThemeName[] = ["rainforest", "base", "candy"];

const getNextTheme = (currentTheme: ThemeName): ThemeName => {
  const nextIndex = (themes.indexOf(currentTheme) + 1) % themes.length;
  return themes[nextIndex];
};

const RootLayout: FC<{ children?: ReactNode }> = ({ children }) => {
  const [theme, setTheme] = useState<ThemeName>("base");

  const rotateTheme = () => {
    setTheme(getNextTheme);
  };

  // Provide the theme and rotateTheme function to all children
  return (
    <ThemeContext.Provider value={{ theme, rotateTheme }}>
      <html lang="en" data-theme={theme}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
        </Head>
        <body className={inter.className}>
          <div>
            <button
              onClick={rotateTheme}
              className="w-full mb-5 rounded-md border border-transparent bg-primary-500 px-4 py-3 text-base font-medium text-primary-50 shadow-sm hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-primary-600 focus:ring-offset-2 focus:ring-offset-gray-50"
            >
              Click To Change Theme
            </button>
            {children}
          </div>
        </body>
      </html>
    </ThemeContext.Provider>
  );
};

export default RootLayout;
export { ThemeContext, useTheme };
